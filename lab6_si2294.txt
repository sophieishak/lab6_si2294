# lab6_si2294
Lab6
si2294
Sophie Ishak

1. In your own words, what is version (or source) control?

Version control allows you to track changes on documents, computer programs and web sites, as well as other information systems. This makes it easy to make and revert changes, synchronize across versions, track ownership, test changes, and break down your work.

2. Explain the difference between Git and GitHub.

Git is a tool to manage your source code revisions and collaborate with other developers. GitHub is the web-based Git repository hosting service, aka it is a place online where you can store Git-controlled software, storing multiple versions of these files.

3. In a few sentences, explain what a "commit" is?

In Git, to “commit” is to record your changes, committing the staged snapshot to the project history. This is helpful as Git does not force you to interact with the central repository until you’re ready. “git commit” will launch a text editor prompting you for a commit message; “git commit -m “<message>”” will allow you create the actual commit. Meanwhile, “git commit -a” will commit a snapshot of all the changes in the working directory. 

4. What is a "branch" in Git terms?

A “branch” is a pointer that points to a commit. Branching in Git indicates the relationship between various snapshots (parents and children, based on if a snapshot is an iteration of another for example). 

5. What is a repository? Explain what happens when you "push" to and "pull" from a repository.

A repository is a regular folder that is on your computer’s file system; Git watches it for file changes. A Git repo can be cloned to a shared file system and accessed by other people. Pushing sends the recent commit history from your local repo up to GitHub. Pulling grabs changes from the GitHub repo and merges them with your local repository.

6. What is involved in the "clone" operation?

Cloning a repository creates a local copy of the repo on your computer that you can sync between the two locations. 

7. Find an example of Git being used for a peer production project. In several paragraphs answer the following: Who are they? What do they do? Who maintains the repository? What are the rules for contributing?

I attended an Abortion Access Hackathon with the following Git, containing 9 repos: https://github.com/AbortionAccessHackathon. 

The contributors to the Hackathon were policy makers, software engineers, product designers, and students. All contributors were social activists who shared an interest in hacking for projects that would widen access (directly and indirectly) to abortion access.

One repo to expose fake abortion clinics (“https://github.com/AbortionAccessHackathon/expose_fake_clinics”) has the following contributors: https://github.com/AbortionAccessHackathon, all social activists from diverse backgrounds. The repo has not been maintained since September 17.

One rule was that you clone, rather than fork, the repo, unless your intention was to develop the original repo. Secondly, the repo recommends the developer attend to several formatting conventions; for example, the code uses two spaces, no semi-colons, and trailing commas where possible.

The repo also uses the following MIT License that seems to absolve liability for the authors.
 
“The MIT License (MIT)

Copyright (c) 2017 Fullstack Academy of Code

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.”

